var api = require('api');
var getContext = require('helpers/getContext');
var getTilybotPayload = require('helpers/getTilybotPayload');

var action = 'getSkillsByOccupation';
async function handler(req, res, next) {
	let payload = getTilybotPayload(req.body.result.fulfillment.messages);
	let credsContext = getContext("creds", req.body.result.contexts);

	let tilrRes = await api.get('/occupations/' + req.body.result.resolvedQuery);
	if (tilrRes.data.occupations.parent_occupations) {
		tilrRes = await api.get('/occupations/' + tilrRes.data.occupations.parent_occupations);
	}

	req.log.info('found skills for occupation ID %s', req.body.result.resolvedQuery);
	req.log.debug(tilrRes.data.linked.skills);

	let userRes = await api.get('/users/' + credsContext.parameters.id, {
		headers: {
			'X-API-EMAIL': credsContext.parameters.email,
			'X-API-TOKEN': credsContext.parameters.token
		}
	});

	let skills = tilrRes.data.linked.skills.filter((skill) => {
		return userRes.data.linked.skills.findIndex((elem) => skill.skill_id === elem.skill_id) === -1;
	});

	req.log.info('filtered out skills already rated');
	req.log.debug(skills);

	if (skills.length === 0) {
		res.send({
			followupEvent: {
				name: 'HAVE_ALL_SKILLS'
			},
			contextOut: [
				{
					name: 'occupations-have-all-skills',
					lifespan: 1
				}
			]
		});
	} else {
		res.send({
			data: {
				tilybot: {
					messages: payload.messages,
					skills: skills
				}
			}
		});
	}
}

module.exports = { action, handler };