var errs = require('restify-errors');

var addSkill = require('actionHandlers/addSkill');
var getBackgroundCheckStatus = require('actionHandlers/getBackgroundCheckStatus');
var getSkillsByOccupation = require('actionHandlers/getSkillsByOccupation');
var searchOccupations = require('actionHandlers/searchOccupations');
var setDiscovery = require('actionHandlers/setDiscovery');
var setDistance = require('actionHandlers/setDistance');
var setJobFamily = require('actionHandlers/setJobFamily');
var setTravelMethod = require('actionHandlers/setTravelMethod');
var setWorkType = require('actionHandlers/setWorkType');


/*
**	Wraps each action handler with the appropriate handler name-matching check, general logging, and error handling
*/
function wrapHandler(handler) {
	return async function(req, res, next) {
		try {
			if (req.body.result.action && req.body.result.action === handler.action) {
				req.log.info('ACTION: %s', handler.action);
				req.log.debug({ body: req.body });
				await handler.handler(req, res, next);
				req.log.info('SUCCESS: %s', handler.action);
				return next(false);
			}
			return next();
		} catch(err) {
			let errObj;
			if (err.response && err.response.status)
				errObj = errs.makeErrFromCode(err.response.status);
			else if (err.code && err.code === 'ECONNABORTED')
				errObj = new errs.RequestTimeoutError();
			else
				errObj = new errs.InternalServerError();

			errObj.message = 'req_id=' + req.id();
			res.send({
				followupEvent: {
					name: 'SERVER_ERROR',
					data: {
						error: errObj
					}
				},
				contextOut: [
					{
						name: 'eventTriggered',
						lifespan: 1
					}
				]
			});
			req.log.error(errObj);
			return next(false);
		}
	};
};

module.exports = [
	addSkill,
	getBackgroundCheckStatus,
	getSkillsByOccupation,
	searchOccupations,
	setDiscovery,
	setDistance,
	setJobFamily,
	setTravelMethod,
	setWorkType
].map(wrapHandler);